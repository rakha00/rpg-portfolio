---
import "../styles/global.css";
import { ClientRouter } from "astro:transitions";
import MuteButton from "../components/MuteButton.astro";

export interface Props {
  title: string;
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Rakhadi's Web Developer Portfolio" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{Astro.props.title}</title>

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap"
      rel="stylesheet"
    />

    <ClientRouter />
  </head>
  <body class="min-h-screen bg-gray-900">
    <header
      id="main-header"
      class="bg-gray-900 border-b-2 border-gray-700 relative z-50"
    >
      <nav
        class="container mx-auto flex flex-row flex-wrap justify-center items-center p-4 gap-x-2"
      >
        <a
          href="/"
          data-sound-link="true"
          class="text-gray-300 hover:text-yellow-300 px-3 py-2 rounded-md text-base"
          >World Map</a
        >
        <a
          href="/about"
          data-sound-link="true"
          class="text-gray-300 hover:text-yellow-300 px-3 py-2 rounded-md text-base"
          >About</a
        >
        <a
          href="/skills"
          data-sound-link="true"
          class="text-gray-300 hover:text-yellow-300 px-3 py-2 rounded-md text-base"
          >Skills</a
        >
        <a
          href="/projects"
          data-sound-link="true"
          class="text-gray-300 hover:text-yellow-300 px-3 py-2 rounded-md text-base"
          >Projects</a
        >
        <a
          href="/contact"
          data-sound-link="true"
          class="text-gray-300 hover:text-yellow-300 px-3 py-2 rounded-md text-base"
          >Contact</a
        >
      </nav>
    </header>

    <main class="relative z-10">
      <slot />
    </main>

    <audio id="bgm" src="/sounds/bgm.mp3" loop transition:persist></audio>
    <MuteButton transition:persist />

    <script is:inline>
      if (!window.appInitialized) {
        window.isMuted = localStorage.getItem("isMuted") === "true";

        const bgm = document.getElementById("bgm");
        const muteButton = document.getElementById("mute-button");
        const muteIcon = document.getElementById("mute-icon");

        const sfx = {
          hover: new Audio("/sounds/hover.mp3"),
          click: new Audio("/sounds/click.mp3"),
        };
        sfx.hover.volume = 0.3;
        sfx.click.volume = 0.5;
        if (bgm) bgm.volume = 0.2;

        function updateMuteState() {
          if (!muteIcon) return;
          // Mute/unmute the BGM
          if (bgm) bgm.muted = window.isMuted;
          // Update icon
          muteIcon.src = window.isMuted
            ? "/icons/speaker-off.svg"
            : "/icons/speaker-on.svg";
          // Save preference
          localStorage.setItem("isMuted", String(window.isMuted));
        }

        function playSfx(sound) {
          if (window.isMuted) return;
          sound.currentTime = 0;
          sound.play().catch((e) => {});
        }

        // Initial setup
        updateMuteState();

        // Mute Button listener
        if (muteButton) {
          muteButton.addEventListener("click", () => {
            window.isMuted = !window.isMuted;
            updateMuteState();
          });
        }

        if (bgm) {
          document.body.addEventListener(
            "click",
            () => {
              if (bgm.paused && !window.isMuted) {
                bgm.play().catch((e) => {});
              }
            },
            { once: true }
          );
        }

        // Global SFX listeners
        document.addEventListener("click", (e) => {
          if (!(e.target instanceof Element)) return;
          const link = e.target.closest('a[data-sound-link="true"]');
          if (link) {
            e.preventDefault();
            playSfx(sfx.click);
            const destination = link.getAttribute("href");
            if (destination)
              setTimeout(() => {
                window.location.href = destination;
              }, 200);
          }
        });

        document.addEventListener(
          "mouseenter",
          (e) => {
            if (!(e.target instanceof Element)) return;
            if (e.target.closest('a[data-sound-link="true"]')) {
              playSfx(sfx.hover);
            }
          },
          true
        );

        window.appInitialized = true;
      }

      // This function handles UI updates that need to run on every page change.
      function handlePageUI() {
        // Header visibility
        const header = document.getElementById("main-header");
        if (header) {
          header.style.display =
            window.location.pathname === "/" ? "none" : "block";
        }
        // Ensure mute icon is correct after navigation
        const muteIcon = document.getElementById("mute-icon");
        if (muteIcon) {
          muteIcon.src =
            localStorage.getItem("isMuted") === "true"
              ? "/icons/speaker-off.svg"
              : "/icons/speaker-on.svg";
        }
      }

      document.addEventListener("astro:page-load", handlePageUI);
      // Run on first load as well to set header correctly.
      handlePageUI();
    </script>
  </body>
</html>
